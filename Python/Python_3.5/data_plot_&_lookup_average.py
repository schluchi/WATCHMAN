#!/usr/bin/env python
############################################################################
# Author: Anthony
# Date:10/3/18
#
# Plot the recovered data_1_25
###########################################################################

# Libraries
import sys
import matplotlib.pyplot as plt
import numpy as np
from scipy.interpolate import interp1d

def data_of_file(file, data_list):
    print("file: "+file)
    f = open(file, "rb")
    start_code = list()
    header_vped = list()
    header_window = list()
    end_code = list()
    for k in range(0,11):
        window = list()
        for i in range(0,512):
            start_code.append(f.read(2))
            header_vped.append(int.from_bytes(f.read(1), byteorder='little', signed=False)*0.25)
            header_window.append(int.from_bytes(f.read(2), byteorder='little', signed=False))
            channel = list()
            for j in range(0,16):
                sample = list()
                for m in range(0,32):
                    sample.append(int.from_bytes(f.read(2), byteorder='little', signed=False))
                channel.append(sample)
            window.append(channel)
            end_code.append(f.read(2))
        data_list.append(window)
    f.close()
    general_flag=True
    flag=True
    for tmp in start_code:
        if(str(tmp.hex()) != "55aa"):
            #print("  - problem start code="+str(tmp.hex()))
            general_flag=False
            flag=False
    if(flag):
        print("  - start code are ok!")
    else:
        print("  - start code failed!")
    flag=True
    for i in range(0,11):
        vped = i*0.25
        for j in range(0,512):
            if(header_vped[i*512 + j] != vped):
                #print("  - problem header vped="+str(header_vped[i*512 + j])+" | vped="+str(vped))
                general_flag=False
                flag=False
    if(flag):
        print("  - header vped are ok!")
    else:
        print("  - header vped failed!")
    flag=True
    for i in range(0,11):
        for j in range(0,512):
            if(header_window[i*512 + j] != j):
                print("  - problem header window="+str(header_window[i*512 + j])+" | window="+str(j))
                general_flag=False
                flag=False
    if(flag):
        print("  - header window are ok!")
    else:
        print("  - header window failed!")
    flag=True
    for tmp in end_code:
        if(str(tmp.hex()) != "33cc"):
            print("  - problem end code="+str(tmp.hex()))
            general_flag=False
            flag=False
    if(flag):
        print("  - end code are ok!")
    else:
        print("  - end code failed!")
    if(general_flag == False):
        sys.exit()

y = np.linspace(0,2.5,11)
degree = 3
range_min = 3
range_max = 10
file_name = "data_vped1_25_amplifiershorted.bin"

data_file = list()
x_average = [554.06087112426758, 568.93116760253906, 603.87067031860352, 689.60133743286133, 822.00333023071289, 1000.5580978393555, 1195.4787635803223, 1372.1912727355957, 1539.4263343811035, 1643.451416015625, 1643.7540130615234]
ax = list()
suptitle_name = file_name+" | all channels | degree="+str(degree)+" | range("+str(range_min*0.25)+"V; "+str(range_max*0.25)+"V)"
fig, ax = plt.subplots(1,1)
fig.suptitle(suptitle_name)
x_ideal = np.linspace(0,2047,11)
ax.plot(x_ideal, y, label='data ideal')
ax.plot(x_average, y, ':*', label='data average')
ax.plot(x_average[range_min:range_max], y[range_min:range_max], '*', label='data average range')
p = np.polyfit(x_average[range_min:range_max], y[range_min:range_max], degree)
f = np.poly1d(p)
print('DataX:')
print(x_average[range_min:range_max])
print('DataY:')
print(y[range_min:range_max])
print('coefficient:')
print(p)
ax.plot(x_ideal[2:], f(x_ideal[2:]), ':.', label='data fit python')
p_tmp = [-2.0871018436631319, 0.0068308991827066125, -4.9397790948723977e-06, 1.4518413051667072e-09]
p_zynq = list()
for i in range(0,4):
    p_zynq.append(p_tmp[3-i])
f_zynq = np.poly1d(p_zynq)
print('coefficient from zynq:')
print(p_zynq)
ax.plot(x_ideal[2:], f_zynq(x_ideal[2:]), '.', label='data fit zynq')

ax.grid(True)
ax.legend()

lookup_table = list()
for i in range(0,2048):
    val = f_zynq(i)*2048/2.5
    if(val < 0):
        val = 0
    lookup_table.append(val)
    """    if((val%1) != 0):
        val = val-(val%1)"""
lookup_table_zynq
for i in range(0,2048):
    if(lookup_table[i] != (lookup_table_zynq[i]*1.0)):
        print(str(i)+") value different: python="+str(lookup_table[i])+" | zynq="+str(lookup_table_zynq[i]))

plt.show()
